Первым делом нам необходимо разделить нашу конфигурацию webpack на 3: общая (базовая, входит в состав всех остальных конфигураций), конфигурация для разработки (dev, включает в себя hot code reload и генерацию source map для отладки в браузере) и конфигурация для сборки приложения на боевые сервера (prod, минифицрованный код без лишних зависимостей). В этом нам поможет плагин для WebPack с названием webpack-merge:
https://webpack.js.org/guides/production/#setup

Также нам необходимо перенастоить для prod окружения сборку итогового JS скрипта в каталог статических файлов в нашем Spring приложении:
https://webpack.js.org/guides/output-management/

После успешной сборки JS приложения нам небходимо настроить сборочный Gradle скрипт для запуска yarn задач (сборки JS). В этом нам поможет gradle-node-plugin:
https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md

Диаграмма жизненного цикла процесса сборки приложений в Gradle:
https://proandroiddev.com/understanding-gradle-the-build-lifecycle-5118c1da613f

1.
yarn add -D webpack-merge
зависимость помогает объединять несколько конфигов
2.
webpack.config.js  rename  webpack.common.js
3.
create
webpack.dev.js add
        const merge = require('webpack-merge');
        const common = require('./webpack.common.js');

        module.exports = merge(common, {
            mode: 'development',
            devtool: 'source-map',
            devServer: {
                contentBase: './dist',
                compress: true,
                port: 8000,
                allowedHosts: [
                    'localhost:9000'
                ],
                stats: 'errors-only',
                clientLogLevel: 'error',
            },
        });

webpack.prod.js add
        const path = require('path');
        const merge = require('webpack-merge');
        const common = require('./webpack.common.js');
        const CleanWebpackPlugin = require('clean-webpack-plugin');

        module.exports = merge(common, {
            mode: 'production',
            plugins: [
                new CleanWebpackPlugin(),
            ],
            output: {
                filename: 'main.js',
                path: path.resolve(__dirname, 'src', 'main', 'resources', 'static', 'js')
            }
        });
4.
.gitignore add
        /src/main/resources/static/js/
5.
webpack.common.js cut

        mode: 'development',
        devtool: 'source-map',
        
        devServer: {
            contentBase: './dist',
            compress: true,
            port: 8000,
            allowedHosts: [
                'localhost:9000'
        ],
        stats: 'errors-only',
        clientLogLevel: 'error',
    },
        
to
webpack.dev.js put

      mode: 'development',
      devtool: 'source-map',
      
        devServer: {
            contentBase: './dist',
            compress: true,
            port: 8000,
            allowedHosts: [
                'localhost:9000'
        ],
        stats: 'errors-only',
        clientLogLevel: 'error',
    },
    
6. 
webpack.common.js 
entry: path.join(__dirname, 'src', 'main', 'resources', 'static', 'js', 'main.js'),   and   path.join(__dirname, 'src', 'main', 'resources', 'js'),
    delete: ", 'static'"
 
7.
yarn add -D clean-webpack-plugin

8.
webpack.prod.js add
    
        const CleanWebpackPlugin = require('clean-webpack-plugin');
        module.exports = merge(common, {
            mode: 'production',
            plugins: [
                new CleanWebpackPlugin(),
            ],
            output: {
                filename: 'main.js',
                path: path.resolve(__dirname, 'src', 'main', 'resources', 'static', 'js')
            }
        });
        
9. 
MainController


......
https://youtu.be/zZ7Z7aL2WFk?list=PLU2ftbIeotGqSTOVNjT4L3Yfy8jatCdhm
      

    



